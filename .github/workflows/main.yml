# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop # Deploy to staging on push to develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual trigger from GitHub UI

env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE_NAME_BACKEND: todo-backend
  DOCKER_IMAGE_NAME_FRONTEND: todo-frontend
  DOCKER_TAG: latest # For production, consider using ${{ github.sha }} for unique tags or semantic versioning

jobs:
  # -----------------------------------------------------------------------------
  # CI Job: Build, Test, Scan - Runs on PRs and pushes to develop/main
  # -----------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies (Backend)
        run: npm install
        working-directory: ./backend

      - name: Run Backend Tests
        run: npm test
        working-directory: ./backend
        continue-on-error: true

      - name: Install Node.js dependencies (Frontend)
        run: npm install
        working-directory: ./todo # Corrected working-directory
        continue-on-error: true

      - name: Run Frontend Tests
        run: npm test
        working-directory: ./todo # Corrected working-directory
        continue-on-error: true

  # -----------------------------------------------------------------------------
  # Deploy to Staging Job - Runs only on pushes to the 'develop' branch
  # -----------------------------------------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- This is the corrected login step for staging ---
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2 # Ensure consistent version

      - name: Terraform Init
        run: terraform init -upgrade
        working-directory: ./terraform/azure

      - name: Terraform Plan (Staging)
        run: terraform plan -var="environment=staging"
        working-directory: ./terraform/azure

      - name: Terraform Apply (Staging)
        run: terraform apply -auto-approve -var="environment=staging"
        working-directory: ./terraform/azure

      - name: Output Staging URL
        run: |
          RESOURCE_GROUP_STAGING=$(terraform output -raw staging_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-staging --resource-group $RESOURCE_GROUP_STAGING --query properties.configuration.ingress.fqdn -o tsv)
          echo "Staging Application URL: https://$FRONTEND_FQDN"
        working-directory: ./terraform/azure

  # -----------------------------------------------------------------------------
  # Deploy to Production Job - Runs only on pushes to the 'main' branch
  # -----------------------------------------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- This is the corrected login step for production ---
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2 # Ensure consistent version

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/azure

      - name: Terraform Plan (Production)
        run: terraform plan -var="environment=production"
        working-directory: ./terraform/azure

      - name: Terraform Apply (Production)
        run: terraform apply -auto-approve -var="environment=production"
        working-directory: ./terraform/azure

      - name: Output Production URL
        run: |
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-production --resource-group $RESOURCE_GROUP_PROD --query properties.configuration.ingress.fqdn -o tsv)
          echo "Production Application URL: https://$FRONTEND_FQDN"
        working-directory: ./terraform/azure

      # Release Management: Update CHANGELOG.md (for demonstration)
      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA}" || echo "No changes to CHANGELOG or commit failed."
          git push
