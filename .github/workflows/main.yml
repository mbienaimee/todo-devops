# This workflow is a complete CI/CD pipeline for ToDo application.
# It handles building, testing, and deploying to staging and production.
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual trigger from GitHub UI

# The 'permissions' block is mandatory for using OpenID Connect (OIDC) authentication.
# It grants the workflow the ability to request a security token from GitHub.
permissions:
  id-token: write # This is crucial for the azure/login action to work.
  contents: read # This allows the workflow to checkout the code from the repository.

# Centralize environment variables for easy maintenance.
env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE_NAME_BACKEND: todo-backend
  DOCKER_IMAGE_NAME_FRONTEND: todo-frontend
  # For production, consider using ${{ github.sha }} for a unique tag.
  DOCKER_TAG: latest

jobs:
  # -----------------------------------------------------------------------------
  # CI Job: Build, Test, Scan - Runs on PRs and pushes to develop/main
  # -----------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies (Backend)
        run: npm install
        working-directory: ./backend

      - name: Run Backend Tests
        run: npm test
        working-directory: ./backend
        continue-on-error: true

      - name: Install Node.js dependencies (Frontend)
        run: npm install
        working-directory: ./todo

      - name: Run Frontend Tests
        run: NODE_OPTIONS=--experimental-vm-modules npm test
        working-directory: ./todo
        continue-on-error: true

  # -----------------------------------------------------------------------------
  # Deploy to Staging Job - Runs when a PR is merged into 'develop'
  # -----------------------------------------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: ci
    if: github.event.pull_request.merged == true && github.base_ref == 'develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      - name: Terraform Init (Staging)
        run: terraform init -upgrade -backend-config="key=staging.tfstate"
        working-directory: ./terraform/azure

      - name: Terraform Plan (Staging)
        run: terraform plan -var="environment=staging" -var="azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./terraform/azure

      - name: Terraform Apply (Staging)
        run: terraform apply -auto-approve -var="environment=staging" -var="azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./terraform/azure

      - name: Output Staging URL
        run: |
          RESOURCE_GROUP_STAGING=$(terraform output -raw staging_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-staging --resource-group $RESOURCE_GROUP_STAGING --query properties.configuration.ingress.fqdn -o tsv)
          echo "Staging Application URL: https://$FRONTEND_FQDN"
        working-directory: ./terraform/azure

  # -----------------------------------------------------------------------------
  # Deploy to Production Job - Runs only on pushes to the 'main' branch
  # -----------------------------------------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      - name: Terraform Init (Production)
        run: terraform init -upgrade -backend-config="key=production.tfstate"
        working-directory: ./terraform/azure

      - name: Run terraform plan -var="environment=production"
        run: terraform plan -var="environment=production" -var="azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./terraform/azure

      - name: Terraform Apply (Production)
        run: terraform apply -auto-approve -var="environment=production" -var="azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./terraform/azure

      - name: Output Production URL
        run: |
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-production --resource-group $RESOURCE_GROUP_PROD --query properties.configuration.ingress.fqdn -o tsv)
          echo "Production Application URL: https://$FRONTEND_FQDN"
        working-directory: ./terraform/azure

      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA}" || echo "No changes to CHANGELOG or commit failed."
          git push
