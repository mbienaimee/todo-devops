# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop # Deploy to staging on push to develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual trigger from GitHub UI

env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE_NAME_BACKEND: todo-backend
  DOCKER_IMAGE_NAME_FRONTEND: todo-frontend
  DOCKER_TAG: latest # For production, consider using ${{ github.sha }} for unique tags or semantic versioning

jobs:
  # -----------------------------------------------------------------------------
  # CI Job: Build, Test, Scan - Runs on PRs and pushes to develop/main
  # -----------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies (Backend)
        run: |
          cd ./backend
          npm install

      - name: Run Backend Tests
        run: |
          cd ./backend
          NODE_OPTIONS='--experimental-vm-modules' npm test

      - name: Install Node.js dependencies (Frontend)
        run: |
          cd ./todo
          npm install

      - name: Run Frontend Tests
        run: |
          cd ./todo
          NODE_OPTIONS='--experimental-vm-modules' npm test

      - name: Build Frontend for production
        run: |
          cd ./todo
          npm run build

      # DevSecOps: Dependency Vulnerability Scanning with Trivy
      - name: Run Trivy for Dependency Scan (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          fs-scanners: dependency
          scan-type: "fs"
          hide-progress: true
          format: "sarif"
          output: "trivy-results-backend.sarif"
          severity: "HIGH,CRITICAL"
          vuln-type: "library"
          exit-code: "1" # Fails the pipeline if HIGH/CRITICAL found
        continue-on-error: true # Set to false for strict DevSecOps, true to just report and allow pipeline to continue

      - name: Run Trivy for Dependency Scan (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          fs-scanners: dependency
          scan-type: "fs"
          hide-progress: true
          format: "sarif"
          output: "trivy-results-frontend.sarif"
          severity: "HIGH,CRITICAL"
          vuln-type: "library"
          exit-code: "1"
        continue-on-error: true

      - name: Upload Trivy Dependency scan results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dependency-scans
          path: |
            ./backend/trivy-results-backend.sarif
            ./todo/trivy-results-frontend.sarif
          if-no-files-found: ignore

      - name: Log in to Azure Container Registry
        if: github.event_name == 'push' # Only log in and push images on actual pushes, not PRs
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Backend Docker Image
        if: github.event_name == 'push'
        run: |
          docker build -t ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }} --target backend-final .
          docker push ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }}

      # DevSecOps: Container Image Security Scanning with Trivy
      - name: Scan Backend Docker Image with Trivy
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }}
          scan-type: "image"
          format: "sarif"
          output: "trivy-image-backend.sarif"
          severity: "HIGH,CRITICAL"
          exit-code: "1"
        continue-on-error: true

      - name: Build and Push Frontend Docker Image
        if: github.event_name == 'push'
        run: |
          docker build -t ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }} --target frontend-nginx .
          docker push ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }}

      - name: Scan Frontend Docker Image with Trivy
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }}
          scan-type: "image"
          format: "sarif"
          output: "trivy-image-frontend.sarif"
          severity: "HIGH,CRITICAL"
          exit-code: "1"
        continue-on-error: true

      - name: Upload Trivy Image scan results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-scans
          path: |
            trivy-image-backend.sarif
            trivy-image-frontend.sarif
          if-no-files-found: ignore

  # -----------------------------------------------------------------------------
  # Deploy Staging Job: Deploys to staging environment on push/merge to develop
  # -----------------------------------------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: ci # Depends on the CI job
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: Staging # Define environment for better visibility in GitHub UI

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3 # Install Terraform CLI

      - name: Clean Terraform State (Staging)
        run: |
          cd terraform/azure
          rm -rf .terraform .terraform.lock.hcl terraform.tfstate*

      - name: Terraform Init (Staging)
        run: |
          cd terraform/azure
          terraform init -reconfigure \
            -backend-config="resource_group_name=todo-devops-rg" \
            -backend-config="storage_account_name=tdopsbienaimeetfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Apply (Staging Infrastructure)
        run: |
          cd terraform/azure
          terraform apply -auto-approve -var="environment=staging" -var="location=southafricanorth"

      - name: Get Backend Staging FQDN
        id: get_backend_staging_fqdn
        run: |
          cd terraform/azure
          RESOURCE_GROUP_STAGING=$(terraform output -raw staging_resource_group_name)
          BACKEND_FQDN=$(az containerapp show --name todo-backend-app-staging --resource-group $RESOURCE_GROUP_STAGING --query properties.configuration.ingress.fqdn -o tsv)
          echo "backend_fqdn=$BACKEND_FQDN" >> $GITHUB_OUTPUT

      - name: Deploy Backend Container App to Staging
        run: |
          cd terraform/azure
          RESOURCE_GROUP_STAGING=$(terraform output -raw staging_resource_group_name)
          az containerapp update \
            --name todo-backend-app-staging \
            --resource-group $RESOURCE_GROUP_STAGING \
            --image ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }} \
            --registry-server ${{ secrets.AZURE_ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password "${{ secrets.ACR_PASSWORD }}" \
            --env-vars COSMOSDB_CONNECTION_STRING="${{ secrets.COSMOSDB_CONNECTION_STRING }}"

      - name: Deploy Frontend Container App to Staging
        run: |
          cd terraform/azure
          RESOURCE_GROUP_STAGING=$(terraform output -raw staging_resource_group_name)
          az containerapp update \
            --name todo-frontend-app-staging \
            --resource-group $RESOURCE_GROUP_STAGING \
            --image ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }} \
            --registry-server ${{ secrets.AZURE_ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password "${{ secrets.ACR_PASSWORD }}" \
            --env-vars REACT_APP_BACKEND_URL="https://${{ steps.get_backend_staging_fqdn.outputs.backend_fqdn }}"

      - name: Output Staging URL
        run: |
          cd terraform/azure
          RESOURCE_GROUP_STAGING=$(terraform output -raw staging_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-staging --resource-group $RESOURCE_GROUP_STAGING --query properties.configuration.ingress.fqdn -o tsv)
          echo "Staging Application URL: https://$FRONTEND_FQDN"

  # -----------------------------------------------------------------------------
  # Deploy Production Job: Deploys to production environment on push/merge to main
  # -----------------------------------------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: ci # Depends on the CI job
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: Production
      url: YOUR_PRODUCTION_FRONTEND_URL_HERE # Replace with your actual production URL after first deploy
      # IMPORTANT: Configure manual approval for 'Production' environment in GitHub Settings
      # Go to GitHub Repo Settings > Environments > Production > Add "Required reviewers"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3 # Install Terraform CLI

      - name: Clean Terraform State (Production)
        run: |
          cd terraform/azure
          rm -rf .terraform .terraform.lock.hcl terraform.tfstate*

      - name: Terraform Init (Production)
        run: |
          cd terraform/azure
          terraform init -reconfigure \
            -backend-config="resource_group_name=todo-devops-rg" \
            -backend-config="storage_account_name=tdopsbienaimeetfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Apply (Production Infrastructure)
        run: |
          cd terraform/azure
          terraform apply -auto-approve -var="environment=production" -var="location=southafricanorth"

      - name: Get Backend Production FQDN
        id: get_backend_production_fqdn
        run: |
          cd terraform/azure
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          BACKEND_FQDN=$(az containerapp show --name todo-backend-app-production --resource-group $RESOURCE_GROUP_PROD --query properties.configuration.ingress.fqdn -o tsv)
          echo "backend_fqdn=$BACKEND_FQDN" >> $GITHUB_OUTPUT

      - name: Deploy Backend Container App to Production
        run: |
          cd terraform/azure
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          az containerapp update \
            --name todo-backend-app-production \
            --resource-group $RESOURCE_GROUP_PROD \
            --image ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }} \
            --registry-server ${{ secrets.AZURE_ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password "${{ secrets.ACR_PASSWORD }}" \
            --env-vars COSMOSDB_CONNECTION_STRING="${{ secrets.COSMOSDB_CONNECTION_STRING }}"

      - name: Deploy Frontend Container App to Production
        run: |
          cd terraform/azure
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          az containerapp update \
            --name todo-frontend-app-production \
            --resource-group $RESOURCE_GROUP_PROD \
            --image ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }} \
            --registry-server ${{ secrets.AZURE_ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password "${{ secrets.ACR_PASSWORD }}" \
            --env-vars REACT_APP_BACKEND_URL="https://${{ steps.get_backend_production_fqdn.outputs.backend_fqdn }}"

      - name: Output Production URL
        run: |
          cd terraform/azure
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-production --resource-group $RESOURCE_GROUP_PROD --query properties.configuration.ingress.fqdn -o tsv)
          echo "Production Application URL: https://$FRONTEND_FQDN"

      # Release Management: Update CHANGELOG.md (for demonstration)
      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA}" || echo "No changes to CHANGELOG or commit failed."
          git push origin main || echo "Failed to push CHANGELOG, might need force-with-lease."
