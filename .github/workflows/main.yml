# This workflow is a complete CI/CD pipeline for your ToDo application.
# It handles building, testing, and deploying to staging and production.
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual trigger from GitHub UI

# Centralize environment variables for easy maintenance.
env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE_NAME_BACKEND: todo-backend
  DOCKER_IMAGE_NAME_FRONTEND: todo-frontend
  # For production, use a unique tag like ${{ github.sha }} instead of 'latest'.
  DOCKER_TAG: latest

jobs:
  # -----------------------------------------------------------------------------
  # CI Job: Build, Test, and Containerize
  # This job runs on all PRs and pushes to `develop` and `main`.
  # -----------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Combine Node.js steps for backend for cleaner logs.
      - name: Install dependencies and run backend tests
        run: |
          npm install
          npm test
        working-directory: ./backend
        # `continue-on-error` can be useful but for a full pipeline,
        # tests should ideally pass to proceed.

      # Combine Node.js steps for frontend for cleaner logs.
      - name: Install dependencies and run frontend tests
        run: |
          npm install
          npm test
        # Assumed frontend directory is 'frontend', please change if it's 'todo'
        working-directory: ./frontend

      # Docker login is required to push images to a registry.
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push the backend Docker image.
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }}

      # Build and push the frontend Docker image.
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }}

  # -----------------------------------------------------------------------------
  # Deploy to Staging Job
  # This job runs only on pushes to the 'develop' branch.
  # -----------------------------------------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Log in to Azure using a Service Principal's credentials.
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Setup Terraform and ensure a consistent version.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        run: terraform init -upgrade
        working-directory: ./terraform/azure

      - name: Terraform Plan (Staging)
        run: terraform plan -var="environment=staging"
        working-directory: ./terraform/azure

      - name: Terraform Apply (Staging)
        run: terraform apply -auto-approve -var="environment=staging"
        working-directory: ./terraform/azure

      - name: Output Staging URL
        run: |
          # Use `terraform output` to get the resource group name for the correct environment.
          RESOURCE_GROUP_STAGING=$(terraform output -raw staging_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-staging --resource-group $RESOURCE_GROUP_STAGING --query properties.configuration.ingress.fqdn -o tsv)
          echo "Staging Application URL: https://$FRONTEND_FQDN"
        working-directory: ./terraform/azure

  # -----------------------------------------------------------------------------
  # Deploy to Production Job
  # This job runs only on pushes to the 'main' branch.
  # -----------------------------------------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Log in to Azure using a Service Principal's credentials.
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Setup Terraform and ensure a consistent version.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/azure

      - name: Terraform Plan (Production)
        run: terraform plan -var="environment=production"
        working-directory: ./terraform/azure

      - name: Terraform Apply (Production)
        run: terraform apply -auto-approve -var="environment=production"
        working-directory: ./terraform/azure

      - name: Output Production URL
        run: |
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-production --resource-group $RESOURCE_GROUP_PROD --query properties.configuration.ingress.fqdn -o tsv)
          echo "Production Application URL: https://$FRONTEND_FQDN"
        working-directory: ./terraform/azure

      # Update the CHANGELOG.md file after a successful deployment.
      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}\n### Changed\n- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA}" || echo "No changes to CHANGELOG or commit failed."
          git push
