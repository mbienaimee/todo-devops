# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  AZURE_RESOURCE_GROUP_NAME: todo-devops-rg # Base name for resource group
  AZURE_WEBAPP_NAME: todo-devops-app # Base name for web app
  AZURE_LOCATION: southafricanorth
  DOCKER_IMAGE_NAME: todo-devops-app
  DOCKER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  TERRAFORM_WORKING_DIRECTORY: ./terraform/azure

jobs:
  # The `build_and_scan` job is a central step that all other jobs depend on.
  # It builds, tests, and scans the application code and Docker image.
  build_and_scan:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}
      acr_login_server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Node.js dependencies
        run: npm install

      - name: Run Backend Tests
        run: npm test

      # DevSecOps Integration: Perform dependency vulnerability scanning.
      - name: Dependency Vulnerability Scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          hide-progress: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "HIGH,CRITICAL"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry (ACR)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # DevSecOps Integration: Perform container image security scanning.
      - name: Container Image Vulnerability Scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          format: "table"
          severity: "HIGH,CRITICAL"
          exit-code: "1" # Fails the job if critical vulnerabilities are found

  # This job handles the deployment to the staging environment.
  # It runs automatically on a push to the 'develop' branch.
  deploy_staging:
    runs-on: ubuntu-latest
    needs: build_and_scan
    if: github.ref == 'refs/heads/develop'
    environment: Staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Terraform part for deploying infrastructure to staging
      - name: Terraform Init and Apply (Staging)
        run: |
          terraform init
          terraform apply -auto-approve -var="environment=staging"
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

      # Deploy the Docker image to the staging App Service
      - name: Deploy to Staging App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.AZURE_WEBAPP_NAME }}-staging"
          images: "${{ needs.build_and_scan.outputs.acr_login_server }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build_and_scan.outputs.image_tag }}"

  # This job handles the deployment to the production environment.
  # It runs on a push to the 'main' branch and requires manual approval.
  deploy_production:
    runs-on: ubuntu-latest
    needs: build_and_scan
    if: github.ref == 'refs/heads/main'
    environment:
      name: Production
      url: https://your-production-url-here.azurewebsites.net # Update this URL
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Terraform part for deploying infrastructure to production
      - name: Terraform Init and Apply (Production)
        run: |
          terraform init
          terraform apply -auto-approve -var="environment=production"
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

      # Deploy the Docker image to the production App Service
      - name: Deploy to Production App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.AZURE_WEBAPP_NAME }}-production"
          images: "${{ needs.build_and_scan.outputs.acr_login_server }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build_and_scan.outputs.image_tag }}"

      # Release Management: Update CHANGELOG.md on production deployment
      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA}" || echo "No changes to CHANGELOG or commit failed."
          git push
