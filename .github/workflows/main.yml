name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  AZURE_WEBAPP_NAME_STAGING: 'todo-devops-app-staging'
  AZURE_WEBAPP_NAME_PROD: 'todo-devops-app-production'
  RESOURCE_GROUP_STAGING: 'todo-devops-staging-rg'
  RESOURCE_GROUP_PROD: 'todo-devops-production-rg'
  TF_STATE_RG_PROD: 'terraform-state-rg-prod'
  TF_STATE_SA_PROD: 'terraformsa${{ github.run_number }}'
  TF_STATE_CONTAINER: 'tfstate'
  TF_STATE_KEY_PROD: 'prod.terraform.tfstate'

jobs:
  build-and-deploy-staging:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 'Terraform: Deploy Staging'
        id: deploy_staging
        run: |
          # Log in to Azure with a Service Principal
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

          # Initialize Terraform with the correct backend configuration
          terraform init -backend-config="resource_group_name=${{ env.TF_STATE_RG_PROD }}" -backend-config="storage_account_name=${{ env.TF_STATE_SA_PROD }}" -backend-config="container_name=${{ env.TF_STATE_CONTAINER }}" -backend-config="key=staging.terraform.tfstate"
          
          # Apply the Terraform plan
          terraform apply -auto-approve

      - name: 'Build and push Docker image'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.AZURE_WEBAPP_NAME_STAGING }}:${{ github.sha }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_STAGING }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          images: '${{ secrets.ACR_LOGIN_SERVER }}/${{ env.AZURE_WEBAPP_NAME_STAGING }}:${{ github.sha }}'

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 'Terraform: Deploy Production'
        id: deploy_production
        run: |
          # Log in to Azure with a Service Principal
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          
          # Initialize Terraform with the correct backend configuration
          terraform init -backend-config="resource_group_name=${{ env.TF_STATE_RG_PROD }}" -backend-config="storage_account_name=${{ env.TF_STATE_SA_PROD }}" -backend-config="container_name=${{ env.TF_STATE_CONTAINER }}" -backend-config="key=${{ env.TF_STATE_KEY_PROD }}"
          
          # Import the existing resource group into Terraform's state
          # This is a one-time fix for the "resource already exists" error.
          terraform import azurerm_resource_group.rg todo-devops-production-rg
          
          # Apply the Terraform plan to create the remaining resources
          terraform apply -auto-approve
          
          # Get the correct URL for the Azure Web App
          FRONTEND_FQDN=$(az webapp show --name todo-devops-app-production --resource-group $RESOURCE_GROUP_PROD --query defaultHostName -o tsv)
          
          # Set the frontend URL as an environment variable for later steps
          echo "FRONTEND_URL=$FRONTEND_FQDN" >> $GITHUB_ENV

      - name: 'Build and push Docker image'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.AZURE_WEBAPP_NAME_PROD }}:${{ github.sha }}
      
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_PROD }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PROD }}
          images: '${{ secrets.ACR_LOGIN_SERVER }}/${{ env.AZURE_WEBAPP_NAME_PROD }}:${{ github.sha }}'
