# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop # Deploy to staging on push to develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual trigger from GitHub UI

env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE_NAME_BACKEND: todo-backend
  DOCKER_IMAGE_NAME_FRONTEND: todo-frontend
  DOCKER_TAG: latest # For production, consider using ${{ github.sha }} for unique tags or semantic versioning

jobs:
  # -----------------------------------------------------------------------------
  # CI Job: Build, Test, Scan - Runs on PRs and pushes to develop/main
  # -----------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Diagnostic step to list all files and directories
      # This will help us confirm the correct paths for the 'working-directory'
      - name: List repository files
        run: ls -R

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies (Backend)
        run: npm install
        working-directory: ./backend

      - name: Run Backend Tests
        run: npm test
        working-directory: ./backend

      - name: Install Node.js dependencies (Frontend)
        run: npm install
        working-directory: ./frontend

      - name: Run Frontend Tests
        run: npm test
        working-directory: ./frontend

      - name: Build and Scan Frontend Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }} .
          # Run a security scan here if needed
        working-directory: ./frontend

      - name: Build and Scan Backend Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }} .
          # Run a security scan here if needed
        working-directory: ./backend

  # -----------------------------------------------------------------------------
  # CD Job: Deploy to Azure Container Apps
  # -----------------------------------------------------------------------------
  cd:
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: Production

    # Permissions and secrets
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: "Az CLI Login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "Az CLI Container Registry Login"
        uses: azure/container-registry-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}

      # Build and push Docker images
      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME_FRONTEND }}:${{ env.DOCKER_TAG }}
        working-directory: ./frontend

      - name: Build and Push Backend Docker Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ env.DOCKER_TAG }}
        working-directory: ./backend

      # Terraform setup and deployment
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" -backend-config="key=todo-devops.tfstate"
        working-directory: terraform/azure

      - name: Terraform Apply (Staging)
        if: github.ref == 'refs/heads/develop'
        run: terraform apply -auto-approve -var="environment=staging"
        working-directory: terraform/azure

      - name: Terraform Apply (Production)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var="environment=production"
        working-directory: terraform/azure

      # Output URLs for production
      - name: Output Production URL
        if: github.ref == 'refs/heads/main'
        run: |
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-production --resource-group $RESOURCE_GROUP_PROD --query properties.configuration.ingress.fqdn -o tsv)
          echo "Production Application URL: https://$FRONTEND_FQDN"
        working-directory: terraform/azure

      # Release Management: Update CHANGELOG.md (for demonstration)
      - name: Update CHANGELOG.md
        if: github.ref == 'refs/heads/main'
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA}" || echo "No changes to CHANGELOG or commit failed."
          git push
