# This workflow is a complete CI/CD pipeline for the ToDo application.
# It handles building, testing, and deploying to staging and production.
name: CI/CD Pipeline

# This triggers the workflow on pushes to 'main' or 'develop' and on Pull Requests.
# We've removed the 'pull_request.merged' trigger in favor of a push to the branch,
# which is the standard way to handle deployments after a merge.
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop # Only run CI on PRs to the staging branch
  workflow_dispatch: # Allows manual trigger from GitHub UI

# The 'permissions' block is mandatory for using OpenID Connect (OIDC) authentication.
# It grants the workflow the ability to request a security token from GitHub.
permissions:
  id-token: write # This is crucial for the azure/login action to work.
  contents: write # We need 'write' to update the CHANGELOG.md

# Centralize environment variables for easy maintenance.
env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE_NAME: todo-app # Combining both into a single app image
  # Use 'latest' for staging, but production should use a unique tag for traceability.
  DOCKER_TAG_STAGING: latest
  DOCKER_TAG_PRODUCTION: ${{ github.sha }}

# This defines a set of jobs to be executed.
jobs:
  # -----------------------------------------------------------------------------
  # CI Job: Build, Test, Scan - Runs on PRs and pushes to develop/main
  # -----------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies
        run: npm install
        working-directory: ./todo

      - name: Run Application Tests
        run: npm test
        working-directory: ./todo
        continue-on-error: true # Allow subsequent steps to run even if tests fail

      # REQUIRED: DevSecOps - Perform dependency vulnerability scanning
      - name: Snyk Dependency Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Make sure you add this secret
        with:
          args: --file=./todo/package-lock.json

  # -----------------------------------------------------------------------------
  # Docker Build & Push - Runs after CI and pushes image to Azure Container Registry
  # -----------------------------------------------------------------------------
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Log in to Azure Container Registry (ACR)
      - name: ACR Login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref == 'refs/heads/main' && env.DOCKER_TAG_PRODUCTION || env.DOCKER_TAG_STAGING }}

      # REQUIRED: DevSecOps - Perform container image security scanning
      - name: Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.ref == 'refs/heads/main' && env.DOCKER_TAG_PRODUCTION || env.DOCKER_TAG_STAGING }}

  # -----------------------------------------------------------------------------
  # Deploy to Staging Job - Runs when a PR is merged into 'develop'
  # -----------------------------------------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build-and-push # This job depends on a successful image build and scan
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # We don't need to run Terraform apply again in the pipeline as the
      # infrastructure should be stable and already deployed. This step is for
      # deploying the new container image.
      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: todo-devops-app-staging
          images: '${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG_STAGING }}'
          
      - name: Output Staging URL
        run: echo "Staging Application URL: https://todo-devops-app-staging.azurewebsites.net"

  # -----------------------------------------------------------------------------
  # Deploy to Production Job - Runs only on pushes to the 'main' branch
  # -----------------------------------------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build-and-push # This job depends on a successful image build and scan
    if: github.ref == 'refs/heads/main'

    # Add an environment with a manual approval step for production deployments
    environment:
      name: production
      url: https://todo-devops-app-production.azurewebsites.net # You must add this URL to the environment in GitHub Settings

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # We are now deploying the container with a unique tag (the commit SHA)
      - name: Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: todo-devops-app-production
          images: '${{ secrets.ACR_LOGIN_SERVER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG_PRODUCTION }}'

      - name: Output Production URL
        run: echo "Production Application URL: https://todo-devops-app-production.azurewebsites.net"

      # This step updates the CHANGELOG.md file. We use `[skip ci]` in the commit
      # message to prevent a new workflow from being triggered, which would
      # cause an infinite loop.
      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA} [skip ci]" || echo "No changes to CHANGELOG or commit failed."
          git push
