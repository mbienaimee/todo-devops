name: CI/CD Pipeline

# This workflow is triggered on pull requests to 'main' and 'develop',
# and on pushes to 'main' and 'develop'.
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  # The Continuous Integration (CI) job to build and test the application.
  # This job must be successful before the 'deploy-production' job can run.
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Placeholder steps for building and testing your application.
      # Replace these with your actual build and test commands (e.g., npm run test).
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  # The Continuous Deployment (CD) job to deploy to production.
  # This job only runs when code is pushed directly to the 'main' branch.
  deploy-production:
    runs-on: ubuntu-latest
    # This job depends on the 'ci' job successfully completing.
    needs: ci
    # This ensures the job only runs for pushes to the 'main' branch.
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Log in to Azure using the service principal defined in secrets.
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Install and configure the correct version of Terraform.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      # Initialize the Terraform working directory.
      - name: Run terraform init
        run: terraform init -upgrade
        working-directory: ./terraform/azure

      # Create a Terraform plan. The fix is to explicitly pass the
      # 'azure_subscription_id' variable from your secrets.
      - name: Run terraform plan -var="environment=production"
        run: terraform plan -var="environment=production" -var="azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./terraform/azure

      # Apply the Terraform plan to deploy to production.
      # The fix is to explicitly pass the 'azure_subscription_id' variable here as well.
      - name: Terraform Apply (Production)
        run: terraform apply -auto-approve -var="environment=production" -var="azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./terraform/azure

      # Use Azure CLI to get the URL of the newly deployed application.
      - name: Output Production URL
        run: |
          RESOURCE_GROUP_PROD=$(terraform output -raw production_resource_group_name)
          FRONTEND_FQDN=$(az containerapp show --name todo-frontend-app-production --resource-group $RESOURCE_GROUP_PROD --query properties.configuration.ingress.fqdn -o tsv)
          echo "Production Application URL: https://$FRONTEND_FQDN"
        working-directory: ./terraform/azure

      # Update the CHANGELOG.md file with the deployment information and push the changes.
      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo -e "\n## [${SHORT_SHA}] - ${CURRENT_DATE}" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Deployed latest changes from merge: $COMMIT_MESSAGE" >> CHANGELOG.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for production deployment ${SHORT_SHA}" || echo "No changes to CHANGELOG or commit failed."
          git push
